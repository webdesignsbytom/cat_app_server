generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  role            Role              @default(USER)
  verifications   UserVerification?
  verified        Boolean           @default(false)
  agreedToTerms   Boolean           @default(false)
  agreedToPrivacy Boolean           @default(false)
  active          Boolean           @default(true)
  profile         Profile?
  createdEvents   Event[]           @relation("createdEvents")
  receivedEvents  Event[]           @relation("receivedEvents")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
}

model Profile {
  id        String @id @default(uuid())
  firstName String @default("")
  lastName  String @default("")
  country   String @default("")
  cats      Cat[]
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVerification {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum VideoType {
  COTD
  GENERAL
  THERAPY
  PENDING
  APPROVED
}

model Video {
  id        Int       @id @default(autoincrement())
  name      String
  videoType VideoType @default(PENDING)
  path      String
  size      Int
  duration  Float
  codec     String
  width     Int
  height    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Cat - user owned cats 
model Cat {
  id            String   @id @default(uuid())
  name          String   @default("")
  dob           DateTime @default(now())
  breed         String   @default("")
  favouriteFood String   @default("")
  image         String   @default("")
  profileId     String
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([profileId])
}


// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
